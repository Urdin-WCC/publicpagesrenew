// Script para probar la funcionalidad de categor√≠a √∫nica en el blog

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function testBlogSingleCategory() {
  try {
    console.log('üîç Iniciando pruebas de categor√≠a √∫nica para el blog...\n');
    
    // 1. Obtener todas las categor√≠as disponibles
    const categories = await prisma.category.findMany({
      select: { id: true, name: true, slug: true }
    });
    console.log(`üìã Categor√≠as disponibles: ${categories.length}`);
    categories.forEach(cat => console.log(`   - ${cat.name} (${cat.id})`));
    
    if (categories.length === 0) {
      console.log('‚ùå No hay categor√≠as para probar. Crea algunas categor√≠as primero.');
      return;
    }
    
    // 2. Crear un post de prueba con una categor√≠a √∫nica
    const testCategory = categories[0]; // Usamos la primera categor√≠a disponible
    const testPost = await prisma.post.create({
      data: {
        title: `Test Categor√≠a √önica ${new Date().toISOString()}`,
        slug: `test-categoria-unica-${Date.now()}`,
        content: '<p>Este es un post de prueba para la categor√≠a √∫nica</p>',
        status: 'DRAFT',
        authorId: await getAdminUserId(), // Obtener un ID de usuario admin
        categoryIds: JSON.stringify([testCategory.id]), // Guardamos como JSON array con un solo elemento
      }
    });
    
    console.log(`\n‚úÖ Post creado: ${testPost.id} (${testPost.title})`);
    console.log(`   - categoryIds: ${testPost.categoryIds}`);
    
    // 3. Obtener el post con sus categor√≠as
    const postWithCategories = await prisma.post.findUnique({
      where: { id: testPost.id },
      select: { id: true, title: true, categoryIds: true }
    });
    
    console.log('\nüìä Verificando categoryIds almacenado:');
    console.log(`   - Valor raw: ${postWithCategories.categoryIds}`);
    
    // 4. Decodificar el JSON de categoryIds
    let decodedCategories = [];
    try {
      if (postWithCategories.categoryIds) {
        decodedCategories = JSON.parse(postWithCategories.categoryIds);
      }
      console.log('   - Valor parseado:', decodedCategories);
      console.log(`   - N√∫mero de IDs: ${decodedCategories.length}`);
      
      if (decodedCategories.length === 1 && decodedCategories[0] === testCategory.id) {
        console.log('‚úÖ La categor√≠a √∫nica se guard√≥ correctamente en formato JSON array.');
      } else {
        console.log('‚ùå Problema con la categor√≠a almacenada. Formato incorrecto o ID equivocado.');
      }
    } catch (error) {
      console.error('‚ùå Error al decodificar categoryIds:', error);
    }
    
    // 5. Probar la API para verificar que devuelve las categor√≠as correctamente
    console.log('\nüåê Probando endpoint de API para obtener el post con categor√≠as...');
    
    // Usando fetch nativo de Node.js (requiere Node.js 18+)
    const response = await fetch(`http://localhost:3000/api/blog/${testPost.id}`);
    
    if (!response.ok) {
      console.error(`‚ùå Error al obtener el post: ${response.status} ${response.statusText}`);
      return;
    }
    
    const postFromApi = await response.json();
    console.log(`‚úÖ Post obtenido desde API: ${postFromApi.id}`);
    console.log('   - Categor√≠as en la respuesta API:', postFromApi.categories);
    
    if (Array.isArray(postFromApi.categories) && 
        postFromApi.categories.length === 1 &&
        postFromApi.categories[0].id === testCategory.id) {
      console.log('‚úÖ La API devuelve correctamente un array con la categor√≠a √∫nica.');
    } else {
      console.log('‚ùå La API no devuelve el formato esperado para las categor√≠as.');
    }
    
    // 6. Limpiar: eliminar el post de prueba
    await prisma.post.delete({ where: { id: testPost.id } });
    console.log(`\nüßπ Post de prueba eliminado.`);
    
    console.log('\n‚úÖ Prueba completada con √©xito!');
    
  } catch (error) {
    console.error('\n‚ùå Error durante la prueba:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Funci√≥n auxiliar para obtener un ID de usuario administrador
async function getAdminUserId() {
  const adminUser = await prisma.user.findFirst({
    where: { 
      OR: [
        { role: 'ADMIN' },
        { role: 'SUPERADMIN' }
      ]
    },
    select: { id: true }
  });
  
  if (!adminUser) {
    throw new Error('No se encontr√≥ un usuario administrador para realizar las pruebas');
  }
  
  return adminUser.id;
}

// Ejecutar la prueba
testBlogSingleCategory();
