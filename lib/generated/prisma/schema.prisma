generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model AdminAction {
  id        String   @id
  userId    String
  action    String
  details   String?  @db.Text
  module    String
  createdAt DateTime @default(now())
}

model AdminLog {
  id        Int       @id @default(autoincrement())
  userId    String?   @db.VarChar(255)
  userEmail String?   @db.VarChar(255)
  action    String    @db.VarChar(255)
  details   String?   @db.LongText
  timestamp DateTime? @default(now()) @db.DateTime(0)

  @@index([action], map: "idx_action")
  @@index([timestamp], map: "idx_timestamp")
  @@index([userId], map: "idx_userId")
}

model Category {
  id          String    @id
  name        String
  slug        String    @unique
  description String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  Post        Post[]
  Project     Project[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model GlobalConfig {
  id                        String   @id @default("global")
  siteName                  String   @default("Neurowitch")
  description               String?  @db.Text
  globalMetaTitle           String?  @db.VarChar(255)
  globalMetaDescription     String?  @db.Text
  globalKeywords            String?  @db.Text
  defaultSocialShareImage   String?  @db.VarChar(255)
  robotsTxtContent          String?  @db.LongText
  googleAnalyticsId         String?  @db.VarChar(50)
  googleTagManagerId        String?  @db.VarChar(50)
  siteUrl                   String   @default("http://localhost:3000")
  logoUrl                   String?
  faviconUrl                String?
  themeColor                String?
  header                    String?  @db.LongText
  footer                    String?  @db.LongText
  sidebar                   String?  @db.LongText
  social                    String?  @db.LongText
  sharing                   String?  @db.LongText
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime
  maintenanceMode           Boolean  @default(false)
  blogConfig                String?  @db.LongText
  portfolioConfig           String?  @db.LongText
  defaultLightThemePresetId Int?
  defaultDarkThemePresetId  Int?
  themeAssignments          String   @db.LongText
  loadingSpinnerConfig      String   @db.LongText
  themeSwitcherConfig       String   @db.LongText
  stickyElementsConfig      String   @db.LongText
  cookieBannerLinkPageId    Int?
  developerHtmlContent      String?  @db.LongText
  cookieBannerText          String?  @db.Text
  activeThemeId             String?  @db.VarChar(255)
  passwordMinLength         Int?     @default(8)
  passwordRequireUppercase  Boolean? @default(true)
  passwordRequireNumber     Boolean? @default(true)
  passwordRequireSymbol     Boolean? @default(true)
  sessionDuration           Int?     @default(24)
  maxLoginAttempts          Int?     @default(5)
  captchaEnabled            Boolean? @default(false)
  accountLockoutDuration    Int?     @default(30)
  globalSeoTitle            String?
  navigationMenu            String?  @db.LongText
}

model MenuItem {
  id             String      @id
  label          String
  url            String
  order          Int         @default(0)
  parentId       String?
  sectionId      String
  isActive       Boolean     @default(true)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime
  MenuItem       MenuItem?   @relation("MenuItemToMenuItem", fields: [parentId], references: [id])
  other_MenuItem MenuItem[]  @relation("MenuItemToMenuItem")
  SiteSection    SiteSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@index([parentId], map: "MenuItem_parentId_fkey")
  @@index([sectionId], map: "MenuItem_sectionId_fkey")
}

model PageView {
  id        Int       @id @default(autoincrement())
  url       String    @db.VarChar(255)
  referrer  String?   @db.VarChar(255)
  ipAddress String?   @db.VarChar(45)
  userAgent String?   @db.Text
  timestamp DateTime? @default(now()) @db.DateTime(0)

  @@index([timestamp], map: "idx_timestamp")
  @@index([url], map: "idx_url")
}

model Post {
  id                String      @id
  title             String
  slug              String      @unique
  content           String      @db.Text
  excerpt           String?     @db.Text
  coverImage        String?
  status            Post_status @default(DRAFT)
  publishedAt       DateTime?
  featured          Boolean     @default(false)
  deleted           Boolean     @default(false)
  authorId          String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime
  authorDisplayName String?
  categoryId        String?
  User              User?       @relation(fields: [authorId], references: [id])
  Category          Category?   @relation(fields: [categoryId], references: [id])

  @@index([authorId], map: "Post_authorId_fkey")
  @@index([categoryId], map: "Post_categoryId_fkey")
}

model Project {
  id                  String              @id
  title               String
  slug                String              @unique
  content             String              @db.Text
  excerpt             String?             @db.Text
  coverImage          String?
  additionalImageUrls String?             @db.LongText
  displayType         Project_displayType @default(SINGLE)
  status              Project_status      @default(DRAFT)
  publishedAt         DateTime?
  featured            Boolean             @default(false)
  authorDisplayName   String?
  deleted             Boolean             @default(false)
  authorId            String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime
  categoryId          String?
  User                User?               @relation(fields: [authorId], references: [id])
  Category            Category?           @relation(fields: [categoryId], references: [id])

  @@index([authorId], map: "Project_authorId_fkey")
  @@index([categoryId], map: "Project_categoryId_fkey")
}

model Referrer {
  id       String   @id
  referrer String
  date     DateTime
  count    Int      @default(0)
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model SiteSection {
  id        String           @id
  name      String
  type      SiteSection_type
  isActive  Boolean          @default(true)
  createdAt DateTime         @default(now())
  updatedAt DateTime
  MenuItem  MenuItem[]
  Widget    Widget[]
}

model StaticPage {
  id              Int      @id @default(autoincrement())
  title           String
  slug            String   @unique
  contentHtml     String   @db.LongText
  isHomePage      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  showHeader      Boolean? @default(true)
  showFooter      Boolean? @default(true)
  showSidebar     Boolean? @default(false)
  sidebarPosition String?  @default("left") @db.VarChar(10)
  metaTitle       String?  @db.VarChar(255)
  metaDescription String?  @db.Text
  metaKeywords    String?  @db.VarChar(255)
}

model Tag {
  id        String   @id
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model ThemePreset {
  id     Int    @id @default(autoincrement())
  name   String @unique
  config String @db.LongText
}

model User {
  id            String    @id
  name          String?
  email         String    @unique
  password      String
  role          User_role @default(COLLABORATOR)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  Account       Account[]
  Post          Post[]
  Project       Project[]
  Session       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Visit {
  id    String   @id
  date  DateTime @unique
  count Int      @default(0)
}

model Widget {
  id          String      @id
  title       String
  type        Widget_type
  content     String?     @db.Text
  config      String?     @db.LongText
  order       Int         @default(0)
  isActive    Boolean     @default(true)
  sectionId   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  SiteSection SiteSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@index([sectionId], map: "Widget_sectionId_fkey")
}

enum Widget_type {
  LATEST_POSTS
  LATEST_PROJECTS
  SEARCH
  CATEGORIES
  TAGS
  SOCIAL_LINKS
  TEXT
  NEWSLETTER
  RECENT_COMMENTS
}

enum SiteSection_type {
  HEADER
  FOOTER
  SIDEBAR
}

enum User_role {
  MASTER
  ADMIN
  EDITOR
  COLLABORATOR
}

enum Post_status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum Project_displayType {
  SINGLE
  GALLERY
  SLIDER
  GRID
}

enum Project_status {
  DRAFT
  PUBLISHED
  ARCHIVED
}
