"use server"; // Marcar como Server Actions

import { revalidatePath } from "next/cache";
import { getGlobalConfig as getGlobalConfigServer, updateGlobalConfig, GlobalConfig } from "@/lib/config-server"; 
import { getGlobalConfig as getGlobalConfigRobust } from "@/lib/config"; // Importamos la versi√≥n robusta

/**
 * Server Action para obtener la configuraci√≥n global.
 * Usamos la versi√≥n robusta que obtiene los campos de apariencia directamente con SQL.
 */
export async function fetchGlobalConfig(): Promise<GlobalConfig | null> {
  // A√±adir un timestamp a la consulta para evitar cach√©
  const timestamp = Date.now();
  console.log(`üîç fetchGlobalConfig - Iniciando petici√≥n [ts: ${timestamp}]`);
  
  try {
    // Primero intentamos con la versi√≥n robusta que usa SQL directo
    let config = await getGlobalConfigRobust();
    
    // Si no tiene campos necesarios, intentamos con la versi√≥n normal
    if (!config || (!config.defaultLightThemePresetId && !config.loadingSpinnerConfig)) {
      console.log("‚ö†Ô∏è Usando m√©todo secundario de obtenci√≥n de configuraci√≥n");
      config = await getGlobalConfigServer();
    }
    
    console.log(`‚úÖ fetchGlobalConfig - Resultado [ts: ${timestamp}]:`, JSON.stringify(config, null, 2));
    
    // Forzar que Next.js no cachee esta respuesta
    revalidatePath("/admin/settings/appearance");
    
    return config;
  } catch (error) {
    console.error(`‚ùå Error en fetchGlobalConfig [ts: ${timestamp}]:`, error);
    // En caso de error, intentar con el m√©todo tradicional como fallback
    return getGlobalConfigServer();
  }
}

/**
 * Server Action para actualizar una parte de la configuraci√≥n global.
 * @param data - Datos parciales a actualizar.
 */
export async function saveGlobalConfig(data: Partial<GlobalConfig>) {
  try {
    // A√±adir un timestamp a la operaci√≥n para rastreo
    const timestamp = Date.now();
    console.log(`üîç saveGlobalConfig - Iniciando guardado [ts: ${timestamp}]`);
    console.log(`üì¶ Datos recibidos para guardar:`, JSON.stringify(data, null, 2));
    
    // Guardar la configuraci√≥n
    const result = await updateGlobalConfig(data);
    
    console.log(`‚úÖ Resultado de guardado [ts: ${timestamp}]:`, 
      result ? "Datos guardados correctamente" : "No se pudo guardar la configuraci√≥n");
    
    // Invalidar cach√©s agresivamente
    console.log("üîÑ Revalidando todas las rutas relacionadas con la configuraci√≥n...");
    
    // Revalidar rutas relevantes (con { force: true } para forzar la revalidaci√≥n)
    revalidatePath("/", "layout");
    revalidatePath("/admin", "layout");
    revalidatePath("/admin/settings", "layout");
    revalidatePath("/admin/settings/appearance", "page");
    revalidatePath("/admin/settings/header", "page");
    revalidatePath("/admin/settings/sharing", "page");
    revalidatePath("/admin/settings/menu", "page");
    
    // Para indicar que la revalidaci√≥n fue exitosa
    console.log("‚úÖ Rutas revalidadas correctamente");
    
    return { 
      success: true, 
      message: "Configuraci√≥n guardada correctamente.",
      timestamp
    };
  } catch (error) {
    console.error(`‚ùå Error guardando configuraci√≥n [ts: ${Date.now()}]:`, error);
    return { 
      success: false, 
      message: "Error al guardar la configuraci√≥n: " + (error instanceof Error ? error.message : String(error))
    };
  }
}
