# Problema con Categorías del Blog - Documentación de Contexto

## Descripción del Problema

Estamos desarrollando una aplicación modular utilizando Next.js, donde uno de los módulos (blog) no está funcionando correctamente. El síntoma principal es que **el cliente de Prisma no puede acceder al modelo Project, mostrando "prisma.project is undefined"**.

El problema se manifiesta al trabajar con las categorías en el módulo de blog. Mientras que el módulo de portfolio funciona correctamente y permite asignar categorías a los proyectos, el módulo de blog presenta problemas al intentar implementar la misma funcionalidad.

## Contexto Técnico

### Estructura de la Base de Datos
1. **Tabla `Post`**: Para items del blog
   - Tiene un campo `categoryIds` (string) que almacena un array JSON de IDs de categorías

2. **Tabla `Project`**: Para items del portfolio 
   - Tiene un campo `categoryIds` (string) que almacena un array JSON de IDs de categorías

3. **Tabla `Category`**: Categorías compartidas entre blog y portfolio

### Frontend (React/Next.js)
- **En Portfolio**: Los formularios usan `categories` como nombre del campo en los formularios
- **En Blog**: Los formularios intentan usar `categoryIds` en algunos lugares y `categories` en otros

### Endpoints de API
- **En Portfolio**: `/api/portfolio/[id]/route.ts` y `/api/portfolio/route.ts` 
  - Reciben `categories` en el body
  - Lo transforman a JSON y lo guardan en el campo DB `categoryIds`
- **En Blog**: `/api/blog/[id]/route.ts` y `/api/blog/route.ts` 
  - Reciben `categories` en el body
  - Lo transforman a JSON y lo guardan en el campo DB `categoryIds`

### Cliente Prisma
- Está configurado en `lib/prisma.ts`
- Parece haber problemas con la generación o inicialización del cliente para acceder a ciertos modelos

## Cambios Realizados Sin Éxito
1. Modificamos la interfaz `BlogPostFormData` y `PostFormData` para usar `categories` en lugar de `categoryIds`
2. Actualizamos los controladores de formulario en `app/(admin)/admin/blog/edit/[id]/page.tsx` para usar `categories`
3. Intentamos crear un archivo completo para edición de blog (estaba truncado)

## Archivos Relevantes
1. `app/(admin)/admin/blog/edit/[id]/page.tsx` - Editor de posts de blog
2. `app/(admin)/admin/blog/new/page.tsx` - Formulario para nuevo post
3. `app/api/blog/[id]/route.ts` - API endpoint para gestión de posts individuales
4. `app/api/blog/route.ts` - API endpoint para listar y crear posts
5. `lib/prisma.ts` - Cliente Prisma
6. Archivos equivalentes para portfolio (que funcionan correctamente)

## Posibles Causas del Problema
1. **Inconsistencia en Nombres de Campo**: Discrepancia entre `categoryIds` y `categories` en diferentes partes del código
2. **Problemas con la Generación del Cliente Prisma**: El cliente puede no estar actualizándose correctamente
3. **Ruta de Salida del Cliente**: La ruta donde se genera el cliente Prisma podría ser incorrecta
4. **Caché del Cliente**: Problemas con la caché del cliente Prisma que impide reflejar cambios en el modelo

## Posibles Soluciones a Explorar
1. **Regenerar el Cliente Prisma**: Ejecutar `npx prisma generate` para actualizar el cliente
2. **Verificar Importación del Prisma**: Comparar cómo se importa y utiliza en blog vs portfolio
3. **Probar Instancia Directa**: Crear una instancia directa de PrismaClient en lugar de usar singleton
4. **Verificar Prisma Schema**: Revisar que el esquema Prisma tenga correctamente definidos todos los modelos
5. **Unificar Nomenclatura**: Asegurar que se use consistentemente `categories` en frontend y `categoryIds` en backend
6. **Analizar lib/prisma.ts**: Revisar cómo se inicializa y exporta el cliente Prisma

## Comportamiento en Portfolio vs Blog
El portfolio implementa correctamente la funcionalidad de categorías, pero el blog no, a pesar de tener una estructura similar. La diferencia principal parece ser la nomenclatura consistente en el módulo de portfolio, mientras que en el blog hay inconsistencias.

## Recomendaciones para Nuevo Agente
1. Examine primero el archivo `lib/prisma.ts` para entender cómo se configura el cliente
2. Compare el flujo completo de datos entre portfolio y blog (frontend → API → DB)
3. Revise los logs del servidor para ver mensajes de error específicos
4. Intente implementar una solución más radical, reescribiendo completamente el componente problemático basándose en el que funciona correctamente
5. Considere usar directamente prisma.$queryRaw para operaciones críticas si el cliente presenta problemas persistentes
